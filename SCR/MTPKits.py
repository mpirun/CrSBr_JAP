#!/usr/bin/env python 
# coding: utf-8 
from ase.io import read 
from collections import Counter
import os
import shutil
import math
from pylab import *
import glob
import subprocess
def fake_vasp_calcs():
    with open('OUTPUT.cfgs') as f:
        lines = f.readlines()
        cfgcnt = 0
        for line in lines:
            if line == ' Size\n':
                cfgcnt += 1
    
        cntr=1
        for i in range(len(lines)):
            if lines[i] != 'BEGIN_CFG\n':
                continue
    #        else:
    #            print("reading cfg#"+str(cntr+1))
            size = int(lines[i+2].split()[0])
        
            nruter = []
            for j in range(size):
                tmp = []
                words = lines[i+8+j].split()
                tmp.append(float(words[5]))
                tmp.append(float(words[6]))
                tmp.append(float(words[7]))
                nruter.append(tmp)
    
            base = math.ceil(math.log10(cfgcnt))
            dirname = ('job-{:0'+str(base)+'d}').format(cntr)
            os.system('mkdir '+dirname)
            with open(dirname+'/vasprun.xml','w') as ff:
                ff.write('<?xml version="1.0" encoding="ISO-8859-1"?>\n')
                ff.write('<modeling>\n')
                ff.write(' <generator>\n')
                ff.write('  <i name="version" type="string">4.6.35 </i>\n')
                ff.write('</generator>\n')
                ff.write(' <calculation>\n')
                ff.write('  <varray name="forces" >\n')
                for k in range (size):
                    ff.write('  <v>  {: 12.12f} {: 12.12f} {: 12.12f} </v>\n'.format(nruter[k][0], nruter[k][1], nruter[k][2]))
                ff.write('  </varray>\n')
                ff.write(' </calculation>\n')
                ff.write('</modeling>\n')
    
            print(cntr)
            cntr += 1

def mtp2vasp():
    contcar = open ("CONTCAR","w")
    with open("CONTCAR.cfg",encoding='UTF-8') as f:
        lines = f.readlines()
    atom_nm = int(lines [2])
    lattice_a = lines[4]
    lattice_b = lines[5]
    lattice_c = lines[6]
    contcar.write(" This file is generated by ASE\n")
    contcar.write("   1.000\n")
    contcar.write( lattice_a )
    contcar.write( lattice_b )
    contcar.write( lattice_c )
    with open("POSCAR",encoding='UTF-8') as f:
        poscars = f.readlines()
    elements = poscars[5]
    elements_nm = poscars[6]
    
    contcar.write( elements )
    contcar.write( elements_nm )
    contcar.write( "Cartesian\n" )
    for i,line in enumerate(lines):
        if "AtomData:" in line:
            start_line = i

    for line in lines[start_line+1:start_line+atom_nm+1]:
        x = line.split()[2];y = line.split()[3];z = line.split()[4]
        contcar.write( x+"  "+y+"  "+z+"\n")
    contcar.close()
    structure = read("CONTCAR")
    structure.write('CONTCAR',direct=True)

def vasp2mtp():
    poscar = read("POSCAR")
    poscar_cfg = open ("POSCAR.cfg","w")
    poscar_cfg.write("BEGIN_CFG\n")
    poscar_cfg.write(" Size\n")
    poscar_cfg.write("    "+str(poscar.get_global_number_of_atoms())+"\n")
    poscar_cfg.write(" Supercell\n")
    poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[0][0],poscar.cell[0][1],poscar.cell[0][2])+"\n")
    poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[1][0],poscar.cell[1][1],poscar.cell[1][2])+"\n")
    poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[2][0],poscar.cell[2][1],poscar.cell[2][2])+"\n")
    poscar_cfg.write(" AtomData:  id type       cartes_x      cartes_y      cartes_z\n")
    # elements_dict = Counter(poscar.get_chemical_symbols())
    
    # element_type = 0
    positions = poscar.get_positions()
    elements_list = poscar.get_chemical_symbols()
    elements = [x for i, x in enumerate(elements_list) if x not in elements_list[:i]]
    # elements.sort()
    print('元素映射信息!')
    i = 0
    for element in elements:
        print('{:>2}:{}'.format(element,i))
        i = i + 1
    id = 0
    for position,element in zip(positions,elements_list):
        id = id + 1
        eletype = elements.index(element)
        poscar_cfg.write("{:14d}  {:2d}  {:14.12f}    {:10.12f}    {:10.12f}".format(id,eletype,position[0],position[1],position[2])+"\n")
        
    poscar_cfg.write("END_CFG\n")
    poscar_cfg.close()

def p2nd2mtp():
    poscars = glob.glob('POSCAR-*')
    if not os.path.exists('poscars'):
        os.makedirs('poscars')
    else:
        shutil.rmtree('poscars')
        os.makedirs('poscars')
    subprocess.call('mv POSCAR-* poscars', shell=True)    
    
    poscars.sort(reverse=False)
    # print(poscars)
    for poscar in poscars:
        poscar = read('./poscars/' + poscar)
        
        poscar_cfg = open ("POSCARS.cfg","a")
        poscar_cfg.write("BEGIN_CFG\n")
        poscar_cfg.write(" Size\n")
        poscar_cfg.write("    "+str(poscar.get_global_number_of_atoms())+"\n")
        poscar_cfg.write(" Supercell\n")
        poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[0][0],poscar.cell[0][1],poscar.cell[0][2])+"\n")
        poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[1][0],poscar.cell[1][1],poscar.cell[1][2])+"\n")
        poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[2][0],poscar.cell[2][1],poscar.cell[2][2])+"\n")
        poscar_cfg.write(" AtomData:  id type       cartes_x      cartes_y      cartes_z\n")
        # elements_dict = Counter(poscar.get_chemical_symbols())
        
        # element_type = 0
        positions = poscar.get_positions()
        elements_list = poscar.get_chemical_symbols()
        elements = [x for i, x in enumerate(elements_list) if x not in elements_list[:i]]
        # elements.sort()
        # print('元素映射信息!')
        i = 0
        for element in elements:
            print('{:>2}:{}'.format(element,i))
            i = i + 1
        id = 0
        for position,element in zip(positions,elements_list):
            id = id + 1
            eletype = elements.index(element)
            poscar_cfg.write("{:14d}  {:2d}  {:14.12f}    {:10.12f}    {:10.12f}".format(id,eletype,position[0],position[1],position[2])+"\n")
            
        poscar_cfg.write("END_CFG\n")
        poscar_cfg.close()

def p3rd2mtp():
    poscars = glob.glob('3RD.POSCAR.*')
    if not os.path.exists('poscars'):
        os.makedirs('poscars')
    else:
        shutil.rmtree('poscars')
        os.makedirs('poscars')
    subprocess.call('mv 3RD.POSCAR.* poscars', shell=True)  
    poscars.sort(reverse=False)
    for poscar in poscars:
        poscar = read('./poscars/' + poscar)
        
        poscar_cfg = open ("POSCARS.cfg","a")
        poscar_cfg.write("BEGIN_CFG\n")
        poscar_cfg.write(" Size\n")
        poscar_cfg.write("    "+str(poscar.get_global_number_of_atoms())+"\n")
        poscar_cfg.write(" Supercell\n")
        poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[0][0],poscar.cell[0][1],poscar.cell[0][2])+"\n")
        poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[1][0],poscar.cell[1][1],poscar.cell[1][2])+"\n")
        poscar_cfg.write(" {:15.12f}    {:15.12f}    {:15.12f}".format(poscar.cell[2][0],poscar.cell[2][1],poscar.cell[2][2])+"\n")
        poscar_cfg.write(" AtomData:  id type       cartes_x      cartes_y      cartes_z\n")
        # elements_dict = Counter(poscar.get_chemical_symbols())
        
        # element_type = 0
        positions = poscar.get_positions()
        elements_list = poscar.get_chemical_symbols()
        elements = [x for i, x in enumerate(elements_list) if x not in elements_list[:i]]
        # elements.sort()
        # print('元素映射信息!')
        i = 0
        for element in elements:
            print('{:>2}:{}'.format(element,i))
            i = i + 1
        id = 0
        for position,element in zip(positions,elements_list):
            id = id + 1
            eletype = elements.index(element)
            poscar_cfg.write("{:14d}  {:2d}  {:14.12f}    {:10.12f}    {:10.12f}".format(id,eletype,position[0],position[1],position[2])+"\n")
            
        poscar_cfg.write("END_CFG\n")
        poscar_cfg.close()
        
def get_energy_force_virial(filename):
    with open(filename) as f:
        lines = f.readlines()
        cfgcnt = 0
        for line in lines:
            if line == ' Size\n':
                cfgcnt += 1

        cntr=1
        virial = []
        energy = []
        nruter = []
        for i in range(len(lines)):
            if lines[i] != 'BEGIN_CFG\n':

                continue

    #        else:
    #            print("reading cfg#"+str(cntr+1))
            size = int(lines[i+2].split()[0])


            for j in range(size):
                tmp = []
                words = lines[i+8+j].split()
                tmp.append(float(words[5]))
                tmp.append(float(words[6]))
                tmp.append(float(words[7]))
                nruter.append(tmp)
            tmp = []
            words = lines[i+size+11].split()
            tmp.append(float(words[0])/size)
            tmp.append(float(words[1])/size)
            tmp.append(float(words[2])/size)    
            tmp.append(float(words[3])/size)
            tmp.append(float(words[4])/size)
            tmp.append(float(words[5])/size)         
            
            virial.append(tmp)
            energy.append(float(lines[i+size+9].split()[0])/size)
            cntr += 1
    virial = np.array(virial)
    energy = np.array(energy)
    nruter = np.array(nruter)

    return virial,energy,nruter

def plot_date(DFT_virial,DFT_energy,DFT_force,MTP_virial,MTP_energy,MTP_force):
    import matplotlib.pyplot as plt
    
    plt.rcParams["font.weight"] = "bold"
    plt.rcParams["axes.labelweight"] = "bold"
#    plt.rc('font',family='Times New Roman',size = 14) 
    plt.rc('font',size = 14)
    plt.figure(figsize=(16,4.2),dpi=600)

    subplot(1,3,1)
    ax1 = plt.gca()
    plt.scatter(DFT_energy[:],MTP_energy[:],s=12., c='k')
    energy_max=np.max(DFT_energy)
    energy_min=np.min(DFT_energy)
    delta = energy_max - energy_min
    plot(linspace(energy_min-0.02*delta,energy_max+0.02*delta), linspace(energy_min-0.02*delta,energy_max+0.02*delta), '-',color = 'red')
    plt.xlim(energy_min-0.02*delta,energy_max+0.02*delta)
    plt.ylim(energy_min-0.02*delta,energy_max+0.02*delta)
    b0 = delta/4
    step0 = float('%.3f' % b0)
    print("Step0 value:", step0)
    x_major_locator0=MultipleLocator(step0)
    y_major_locator0=MultipleLocator(step0)
    ax1.xaxis.set_major_locator(x_major_locator0)
    ax1.yaxis.set_major_locator(y_major_locator0)
    rmse = np.sqrt(np.mean((MTP_energy[:]-DFT_energy[:])**2))*1000
    plt.text(0.95,0.1,"RMSE: {:.6f} meV/atom".format(rmse), 
             horizontalalignment='right',verticalalignment='center',transform = ax1.transAxes)
    xlabel('DFT energy (eV/atom)')
    ylabel('MTP energy (eV/atom)')
    subplot(1,3,2)
    ax2 = plt.gca()
    plot(DFT_force[:, 0:3], MTP_force[:, 0:3], '.')
    rmse = np.sqrt(np.mean((DFT_force[:, 0:3] - MTP_force[:, 0:3])**2))
    force_max=np.max(DFT_force[:, 0:3])
    force_min=np.min(MTP_force[:, 0:3])
    delta = force_max - force_min
    b = delta/4
    step = float('%.3f' % b)
    x_major_locator=MultipleLocator(step)
    y_major_locator=MultipleLocator(step)
    ax2.xaxis.set_major_locator(x_major_locator)
    ax2.yaxis.set_major_locator(y_major_locator)

    plot(linspace(force_min-0.02*delta,force_max+0.02*delta), linspace(force_min-0.02*delta,force_max+0.02*delta), '-',color = 'red')
    plt.xlim(force_min-0.02*delta,force_max+0.02*delta)
    plt.ylim(force_min-0.02*delta,force_max+0.02*delta)

    xlabel('DFT force (eV/Å)')
    ylabel('MTP force (eV/Å)')
    legend(['x direction', 'y direction', 'z direction'],loc='upper left')
    plt.text(0.95,0.1,"RMSE: {:.6f} eV/Å".format(rmse), 
             horizontalalignment='right',verticalalignment='center',transform = ax2.transAxes)


    subplot(1,3,3)
    ax3 = plt.gca()
    plot(DFT_virial[:, 0:3], MTP_virial[:, 0:3], '.')
    rmse = np.sqrt(np.mean((DFT_virial[:, 0:3] - MTP_virial[:, 0:3])**2))
    virial_max=np.max(DFT_virial[:, 0:3])
    virial_min=np.min(DFT_virial[:, 0:3])
    delta = virial_max - virial_min
    b = delta/4
    step = float('%.3f' % b)
    x_major_locator=MultipleLocator(step)
    y_major_locator=MultipleLocator(step)
    ax3.xaxis.set_major_locator(x_major_locator)
    ax3.yaxis.set_major_locator(y_major_locator)

    plot(linspace(virial_min-0.02*delta,virial_max+0.02*delta), linspace(virial_min-0.02*delta,virial_max+0.02*delta), '-',color = 'red')
    plt.xlim(virial_min-0.02*delta,virial_max+0.02*delta)
    plt.ylim(virial_min-0.02*delta,virial_max+0.02*delta)

    xlabel('DFT virial (eV/atom)')
    ylabel('MTP virial (eV/atom)')
    legend(['xx direction', 'yy direction', 'zz direction'],loc='upper left')
    plt.text(0.95,0.1,"RMSE: {:.6f} eV/atom".format(rmse), 
              horizontalalignment='right',verticalalignment='center',transform = ax3.transAxes)

    subplots_adjust(hspace = 0, wspace = 0.3)
    plt.savefig('result.jpg',dpi = 600,bbox_inches = 'tight')
    
    plt.cla()
    plt.close()
    plt.figure()
    figure(figsize=(10, 8))
    subplot(2,2,1)
    force_error_x = ((DFT_force[:,0] - MTP_force[:,0]))
    force_error_y = ((DFT_force[:,1] - MTP_force[:,1]))
    force_error_z = ((DFT_force[:,2] - MTP_force[:,2]))    
    plt.hist(force_error_x[:], bins=100, density=True , alpha=0.6,edgecolor='black')  
    plt.hist(force_error_y[:], bins=100, density=True , alpha=0.5,edgecolor='black')  
    plt.hist(force_error_z[:], bins=100, density=True , alpha=0.4,edgecolor='black')  
    legend(['x direction', 'y direction', 'z direction'])
    # bins参数指定直方图的柱子数量，alpha参数设置透明度
    plt.xlabel('Force error (eV/Å)')
    plt.ylabel('counts')    
    subplot(2,2,2)
    ener_error = (DFT_energy[:] - MTP_energy[:])*1000
    
    plt.hist(ener_error[:], bins=100, density=True, alpha=0.6,edgecolor='black') 
    plt.xlabel('Energy error (meV/atom)')
    plt.ylabel('counts')    
        
    subplot(2,2,3)
    
    force_x = DFT_force[:,0] 
    force_y = DFT_force[:,1]
    force_z = DFT_force[:,2]     

    plt.hist(force_x[:], bins=100, density=True , alpha=0.6,edgecolor='black')  
    plt.hist(force_y[:], bins=100, density=True , alpha=0.5,edgecolor='black')  
    plt.hist(force_z[:], bins=100, density=True , alpha=0.4,edgecolor='black')  
    legend(['x direction', 'y direction', 'z direction'])
    # bins参数指定直方图的柱子数量，alpha参数设置透明度
    plt.xlabel('force (eV/Å)')
    plt.ylabel('counts')    
    subplot(2,2,4)
    ener = DFT_energy[:]
    plt.hist(ener[:], bins=100, density=True, alpha=0.6,edgecolor='black') 
    plt.xlabel('Energy (eV/atom)')
    plt.ylabel('counts')
    plt.tight_layout()
    plt.savefig('Histogram.jpg',dpi = 300)   
    
    
    
    file = open("energy.dat","w")
    file.write("# DFT MTP (in eV/atom) \n")
    for DFTenergy,MTPenergy in zip(DFT_energy,MTP_energy):
        file.write(" %.12f %.12f \n" %(DFTenergy,MTPenergy))
    file.close()
    file = open("force.dat","w")
    file.write("# DFT (x)  DFT (y) DFT (z) MTP (x)  MTP (y) MTP (z) (in eV/A) \n")
    for DFTforce,MTPforce in zip(DFT_force,MTP_force):
        file.write(" %18.12f %18.12f %18.12f %18.12f %18.12f %18.12f\n" %(DFTforce[0],DFTforce[1],DFTforce[2],MTPforce[0],MTPforce[1],MTPforce[2]))
    file.close()   

    file = open("virial.dat","w")
    file.write("# DFT (xx)  DFT (yy) DFT (zz) MTP (xx)  MTP (yy) MTP (zz) (in eV/atom) \n")
    for DFTvirial,MTPvirial in zip(DFT_virial,MTP_virial):
        file.write(" %18.12f %18.12f %18.12f %18.12f %18.12f %18.12f\n" %(DFTvirial[0],DFTvirial[1],DFTvirial[2],MTPvirial[0],MTPvirial[1],MTPvirial[2]))
    file.close()   
    
def xyz2mtp():
    atoms = read('train.xyz',':')
    elements_list = []
    for atom in atoms:
        elements = atom.get_chemical_symbols()
        unielement = [x for i, x in enumerate(elements) if x not in elements[:i]]
        [elements_list.append(x) for x in unielement if x not in elements_list]
    print('元素映射信息!')
    i = 0
    for element in elements_list:
        print('{:>2}:{}'.format(element,i))
        i = i + 1
    file = open('train.cfg','w',encoding = 'UTF-8')
    for atom in atoms:
        cell = atom.get_cell()
        positons = atom.get_positions()
        energy = atom.get_total_energy()
        forces = atom.get_forces()
        virial = atom.info['virial']
        atom_num = atom.get_global_number_of_atoms()
        elements = atom.get_chemical_symbols()
        file.write('BEGIN_CFG\n')
        file.write(' Size\n')
        file.write(' {:5d}\n'.format(atom_num))
        file.write(' Supercell\n')
        file.write(' {:14.12f} {:14.12f} {:14.12f}\n'.format(cell[0,0],cell[0,1],cell[0,2]))
        file.write(' {:14.12f} {:14.12f} {:14.12f}\n'.format(cell[1,0],cell[1,1],cell[1,2]))
        file.write(' {:14.12f} {:14.12f} {:14.12f}\n'.format(cell[2,0],cell[2,1],cell[2,2]))
        file.write(' AtomData:  id type       cartes_x      cartes_y      cartes_z           fx          fy          fz\n')
        id = 0
    
        for p,f,element in zip(positons,forces,elements):
            id = id + 1
            eletype = elements_list.index(element)
            file.write('{:14d} {:>4} {:13.12f} {:13.12f} {:13.12f} {:13.12f} {:13.12f} {:13.12f}\n'.format(id,eletype,p[0],p[1],p[2],
                    f[0],f[1],f[2]))
        file.write(' Energy\n')
        file.write('{:24.12f}\n'.format(energy))
        file.write(' PlusStress:  xx          yy          zz          yz          xz          xy\n')
        file.write('{:16.5f} {:13.5f} {:13.5f} {:13.5f} {:13.5f} {:13.5f}\n'.format(virial[0,0],virial[1,1],virial[2,2]
                                                                                    ,virial[1,2],virial[0,2],virial[0,1]))
        file.write(' Feature   EFS_by	VASP\n')
        file.write('END_CFG\n')
        file.write('\n')
    file.close()

def purexyz2mtp():
    atoms = read('train.xyz',':')
    elements_list = []
    for atom in atoms:
        elements = atom.get_chemical_symbols()
        unielement = [x for i, x in enumerate(elements) if x not in elements[:i]]
        [elements_list.append(x) for x in unielement if x not in elements_list]
    print('元素映射信息!')
    i = 0
    for element in elements_list:
        print('{:>2}:{}'.format(element,i))
        i = i + 1
    file = open('train.cfg','w',encoding = 'UTF-8')
    for atom in atoms:
        cell = atom.get_cell()
        positons = atom.get_positions()
        # energy = atom.get_total_energy()
        # forces = atom.get_forces()
        # virial = atom.info['virial']
        atom_num = atom.get_global_number_of_atoms()
        elements = atom.get_chemical_symbols()
        file.write('BEGIN_CFG\n')
        file.write(' Size\n')
        file.write(' {:5d}\n'.format(atom_num))
        file.write(' Supercell\n')
        file.write(' {:14.12f} {:14.12f} {:14.12f}\n'.format(cell[0,0],cell[0,1],cell[0,2]))
        file.write(' {:14.12f} {:14.12f} {:14.12f}\n'.format(cell[1,0],cell[1,1],cell[1,2]))
        file.write(' {:14.12f} {:14.12f} {:14.12f}\n'.format(cell[2,0],cell[2,1],cell[2,2]))
        file.write(' AtomData:  id type       cartes_x      cartes_y      cartes_z \n')
        id = 0
    
        for p,element in zip(positons,elements):
            id = id + 1
            eletype = elements_list.index(element)
            file.write('{:14d} {:>4} {:13.12f} {:13.12f} {:13.12f}\n'.format(id,eletype,p[0],p[1],p[2]))

        file.write(' Feature   EFS_by	VASP\n')
        file.write('END_CFG\n')
        file.write('\n')
    file.close()

def mtp2xyz():
    print("Please enter transition filename!")
    filename=str(input())
    print("Please enter element map!")
    element_list = str(input()).split()
    element_map = {index: value for index, value in enumerate(element_list)}
    print(element_map)
    ff=open("configurations.xyz","w",encoding='UTF-8')
    with open(filename) as f:
        lines = f.readlines()
        cfgcnt = 0
        for line in lines:
            if line == ' Size\n':
                cfgcnt += 1
    
        cntr=1
        for i in range(len(lines)):
            if lines[i] != 'BEGIN_CFG\n':
                continue
    #        else:
    #            print("reading cfg#"+str(cntr+1))
            size = int(lines[i+2].split()[0])
            
            a1 = str(lines[i+4].split()[0])
            a2 = str(lines[i+4].split()[1])
            a3 = str(lines[i+4].split()[2])
            
            b1 = str(lines[i+5].split()[0])
            b2 = str(lines[i+5].split()[1])
            b3 = str(lines[i+5].split()[2])
            
            c1 = str(lines[i+6].split()[0])
            c2 = str(lines[i+6].split()[1])
            c3 = str(lines[i+6].split()[2])
            
            lattice = a1+"  " + a2+"  "+a3+"  "+b1+"  "+b2+"  "+b3+"  "+c1+"  "+c2+"  "+c3
            
            nruter = []
            for j in range(size):
                tmp = []
                words = lines[i+8+j].split()
                key=int(words[1])                
                tmp.append(element_map[key])
                tmp.append(float(words[2]))
                tmp.append(float(words[3]))
                tmp.append(float(words[4]))
                nruter.append(tmp)
                
            #######writing position########
            ff.write(str(size)+"\n")           
            ff.write("Lattice=\" "+lattice+"\" "+"Properties=species:S:1:pos:R:3"+"\n")
            nruter = sorted(nruter, key=lambda x: element_list.index(x[0]))
            for k in range (size):
                ff.write("{}  {: 12.12f} {: 12.12f} {: 12.12f} \n".format(nruter[k][0], nruter[k][1], nruter[k][2],nruter[k][3]))


if __name__ == '__main__':

    print("Please enter transition mode!")
    print("(1) vasp2mtp")
    print("(2) mtp2vasp")
    print("(3) fake_vasp_calcs")
    print("(4) plot_calcu_efs")
    print("(5) xyz2mtp")
    print("(6) p2nd2mtp")
    print("(7) p3rd2mtp")
    print("(8) mtp2xyz")
    print("(9) purexyz2mtp")
    model = input()

    if model == "1":
        vasp2mtp()
    elif model == "2":
        mtp2vasp()
    elif model == "3":
        fake_vasp_calcs()
    elif model == "4":
        MTP_virial,MTP_energy,MTP_force = get_energy_force_virial(filename="out.cfg")
        DFT_virial,DFT_energy,DFT_force = get_energy_force_virial(filename="train.cfg")
        plot_date(DFT_virial,DFT_energy,DFT_force,MTP_virial,MTP_energy,MTP_force)
    elif model == "5":
        xyz2mtp()
    elif model == "6":
        p2nd2mtp()
    elif model == "7":
        p3rd2mtp()
    elif model == "8":
        mtp2xyz()        
    elif model == "9":    
        purexyz2mtp()
